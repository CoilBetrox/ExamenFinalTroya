import org.gradle.api.JavaVersion

plugins {
    id 'java'
    //id 'org.kordamp.gradle.jandex' version '1.0.0'
    id 'application'
}

group 'com.distribuida'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

ext {
    helidonVersion = '3.2.6'
}

dependencies {
    implementation platform("io.helidon:helidon-dependencies:${helidonVersion}")

    implementation('io.helidon.microprofile.server:helidon-microprofile-server:3.2.6')
    implementation('io.helidon.microprofile.bundles:helidon-microprofile:3.2.6')
    implementation("io.helidon.microprofile.openapi:helidon-microprofile-openapi:3.2.6")
    testImplementation("io.helidon.microprofile.cdi:helidon-microprofile-cdi:3.2.6")
    implementation("jakarta.ws.rs:jakarta.ws.rs-api:3.1.0")
    implementation("io.helidon.microprofile.config:helidon-microprofile-config:3.2.6")
    implementation('org.glassfish.jersey.media:jersey-media-json-binding')
    implementation("jakarta.transaction:jakarta.transaction-api:2.0.1")
    implementation("org.postgresql:postgresql:42.6.0")
    implementation("jakarta.persistence:jakarta.persistence-api:3.1.0")
    compileOnly("jakarta.enterprise:jakarta.enterprise.cdi-api:4.0.1")
    testImplementation("io.helidon.microprofile.cdi:helidon-microprofile-cdi:3.2.6")

    //runtimeOnly('org.jboss:jandex')
    //runtimeOnly('jakarta.activation:jakarta.activation-api')

    //testImplementation('io.helidon.microprofile.tests:helidon-microprofile-tests-junit5')
    //testCompileOnly('org.junit.jupiter:junit-jupiter-api:')
    //testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:')
}



application {
    mainClass = 'io.helidon.microprofile.cdi.Main'
}
/*
test {
    useJUnitPlatform()
}

task copyLibs(type: Copy) {
    from configurations.runtimeClasspath
    into 'build/libs/libs'
}

copyLibs.dependsOn jar
assemble.dependsOn copyLibs

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.name}.jar"
    manifest {
        attributes (
                'Main-Class': "${application.mainClass}",
                'Class-Path': configurations.runtimeClasspath.files.collect { "libs/$it.name" }.join(' ')
        )
    }
}



task copyBeansXML {
  doLast {
    ant.copy file: "${projectDir}/src/main/resources/META-INF/beans.xml",
             todir: "${buildDir}/classes/java/main/META-INF"
  }
}

classes.dependsOn copyBeansXML
*/